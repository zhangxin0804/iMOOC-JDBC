1. JDBC技术是Java开发必备的知识，并且是学习 Hibernate 和 MyBatis 的基础。

	一个小的应用例子如下：
	以mooc网站为例，客户端输入用户名和密码准备登录mooc网，服务器上的应用程序会根据客户端传来的用户名和密码，去用户数据库中查询是否该用户存在以及该用户的密码是否匹配，查询结果由数据库传回服务器后，服务器的应用程序再根据查询的结果，给客户端响应不同的页面。

	JDBC是面向关系型数据库!!!!



2. JDBC（Java DataBase Connectivity,java数据库连接）

	JDBC是一座桥梁连接了Java应用程序和关系型数据库。有了JDBC的话，Java应用程序就可以从数据库中读取、存储、更新、删除数据。JDBC提供了
标准的API应用程序接口，来规范JAVA应用程序如何访问数据库。
	
	不同的数据库都实现了与JDBC有关的接口,都提供自己相应的JDBC Driver也就是jar包。

	只需要编写SQL语句提供给JDBC driver, 然后就会pass on to actual database.

	连接的数据库可以是存在于local, 或者network, 或者cloud上的数据库。



											Java应用
												|
												|
											  JDBC
											 /  |  \
											/   |   \ 
										   /    |    \ 
									  Oracle   MySQL  Sql Server




3.  JDBC Architecture 

	注意： JDBC是一个宏观的概念, 抽象层面的。

	· JDBC Driver (key component), 实际存在的。
	  -- provides connection to a database, 提供并实现底层的连接。
	  -- Converts JDBC API calls to low level calls for specic database
	  -- 实际上就是一个对应数据库官网下载的 jar包


	· JDBC Driver implementation
	  -- provided by database vendor, 数据库公司会提供相应的JDBC Driver也即jar包。


	· JDBC Driver Manager, 实际存在的代码。比较偏顶层。
	  -- Driver Manager helps to connect an application to database based on the database connection string
	  -- In JDBC 4.0, the JDBC driver are automatically loaded based on the classpath
	  -- In legacy JDBC 3.0, drivers have to be explicitly loaded with  
	     Class.forName(theDriverName)


	简而言之，JDBC Driver是比较偏底层的实现，它帮助我们完成了应用程序和数据库的底层连接，同时能够将API的调用，一层一层往下转化为对数据库的调用
操作；但是，JDBC Driver它并不是一个在任何JAVA应用程序中都会用到的，因此需要通过JDBC Driver Manager也即JDBC 驱动管理来操作何时是否需要
load JDBC Driver. 相当于，The basic service for managing a set of JDBC drivers.
	
	JDBC Driver实际上就是一个jar包。



4. JDBC API

	- JDBC API is defined in the following package: java.sql and javax.sql, 这里是JAVA SE部分就存在的。
	- JDBC API在整个JDBC architecture中处于比较顶层的位置，一方面直接面向用户提供编程API，另一方面会将API call一层一层往下传递交由偏底层
	  的 JDBC Driver 来进行convert并最终与实际database进行通信。

	key classes:
	· java.sql.DriverManager, 是一个具体的类。用于得到一个应用程序和数据库的连接。
	
	· java.sql.Connection, 是接口interface
		A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.

	· java.sql.Statement, 是接口interface
		- The object used for executing a static SQL statement and returning the results it produces.
		- The statement object is based on conncetion.

	· java.sql.ResultSet, 是接口interface
		A table of data representing a database result set, which is usually generated by executing a statement that queries the database.

	· javax.sql.DataSource (for connection pooling), 是接口interface


5. Development Process 开发步骤

	【1】Get a connection to database.

		· Need a connection string in form of JDBC URL	

		· Basic Syntax
			jdbc:<driver protocol>:<driver connection details>,   注意：<>只是用于说明里面内容是什么，实际不包含<>

		· Examples
			MS SQL Database         jdbc:odbc:DemoDSN
			Oracle Database         jdbc:oracle:thin@myserver:1521:demodb
			MySQL			 		jdbc:mysql://localhost:3306/demodb

		· code snippet

			import java.sql.*;
			...
			String dbURL = "jdbc:mysql://localhost:3306/demodb";
			String user = "student";
			String password = "student";

			Connectin myConn = DriverManager.getConnection(dbURL, user, password);
			...

		注意：Failure to connect will throw an exception
			- java.sql.SQLException: bad url or credentials
			- java.lang.ClassNotFoundException: JDBC driver not in classpath




	【2】Create a Statement object.

		· The statement object is based on conncetion

		· It will be used later to execute SQL query

		· code snippet
			/* Creates a Statement object for sending SQL statements to the database. */
			Statement myState = myConn.createStatement();




	【3】Execute SQL query.

		· Use Statement object to pass in your SQL query

		· code snippet
			/* Executes the given SQL statement, which returns a single ResultSet object. */
			ResultSet myRes = myState.executeQuery("select * from employees");

		注意：SQL query可以是hard-code的，也可以是dynamically created的String对象。



	【4】Process Result Set.

		· A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row.

		· ResultSet.next()
			- moves forward one row
			- returns true if there are more rows to process

		· Looping through a result set 

		· A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set.

		· The ResultSet interface provides getter methods for retrieving column values from the current row. Values can be retrieved using either the index number of the column or the name of the column. In general, using the column index will be more efficient. Columns are numbered from 1 (one-based). For maximum portability, result set columns within each row should be read in left-to-right order, and each column should be read only once.

		· code snippet

			ResultSet myRes = myState.executeQuery("select last_name, first_name from employees");
			while( myRes.next() ){
				// read data from each row
				System.out.println( myRes.getString("last_name") );
				System.out.println( myRes.getString("first_name") );
			}



6.  安装 MySQL + MySQL Workbench(GUI tool)

	Connection Name: XiaoHaMySQL
	Service: Mysql@127.0.0.1:3306
	user: root
	password: zxlyf19901004

	每次使用前，首先要通过spotlight搜索到MySQL的system preference的设置，设置成启动MySQL server, 然后再操作MySQL Workbench.




7.  如何创建新用户? Create User (run the following script in MySQL Workbench)

	/******************** create_user.sql *********************/
	CREATE USER 'student'@'localhost' IDENTIFIED BY 'student';
	GRANT ALL PRIVILEGES ON *.* TO 'student'@'localhost';

	Connection Name: XiaoHaMySQL2
	Service: Mysql@127.0.0.1:3306
	user: student
	password: student



8. 安装 MySQL JDBC Driver   +  Configure JDBC Driver in Eclipse

	- https://dev.mysql.com/downloads/connector/j/
	- 把 MySQL JDBC Driver即jar包, copy到目标project工程中
	- 在工程的properties里的java build path中，将JDBC Driver的jar包, add进library




9. 数据库 Schema 的含义

	· 概念上的Schema，指的是一组DDL语句集，该语句集完整地描述了数据库的结构。(这是学校585学的schema的概念)

	· 物理上的Schema，指的是数据库中的一个名字空间，包含一组表、视图和存储过程等命名对象。
		- 物理Schema可以通过标准SQL语句来创建、更新和修改。
		- 在MySQL Workbench中，每次创建完后，要记得刷新refresh一下。



10. 










